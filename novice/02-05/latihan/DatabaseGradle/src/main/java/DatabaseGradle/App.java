/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DatabaseGradle;

import java.util.*;

import javax.imageio.spi.ServiceRegistry;
import DatabaseGradle.Employee;
import org.hibernate.*;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.*;
import java.sql.*;

public class App {
    private static Metadata meta;

    public static void main(String[] args) {
        // try (Connection conn =
        // DriverManager.getConnection("jdbc:mariadb://localhost/", "root",
        // "password")){
        // try (Statement stmt = conn.createStatement()){
        // try (ResultSet rs = stmt.executeQuery("select 'Hello World!'")){
        // rs.first();
        // System.out.println(rs.getString(1));
        // }
        // }
        // }
        // }

        try {
            StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();
            meta = new MetadataSources(ssr).getMetadataBuilder().build();
        } catch (Throwable ex) {
            System.err.println("Failed to create sessionFactory object. " + ex);
            // throw new ExceptionInInitializerError(ex);
        }

    App app = new App();

    Integer empID1 = app.addEmployee("Zara","Ali",1000);
    Integer empID2 = app.addEmployee("Daisy","Das",5000);
    Integer empID3 = app.addEmployee("John","Paul",10000);

    // list all employee
    app.listEmployee();

    // update employee record
    app.updateEmployee(empID1, 5000);

    // delete employee from database
    app.deleteEmployee(empID2);

    // list all employee
    app.listEmployee();



    }

    // method add employee

    public Integer addEmployee(String fname , String lname, int salary){
        SessionFactory factory = meta.getSessionFactoryBuilder().build();
        Session session = factory.openSession();
        Transaction tx = null;
        Integer employeeID = null;

        try{
            tx = session.beginTransaction();
            Employee employee = new Employee(fname,lname,salary);
            employeeID = (Integer) session.save(employee);
            tx.commit();
        } catch (HibernateException e){
            if(tx != null) tx.rollback();
            e.printStackTrace();
        } finally{
            session.close();
            factory.close();
        }
        return employeeID;
    }

    // method read all employee

    public void listEmployee (){
        SessionFactory factory = meta.getSessionFactoryBuilder().build();
        Session session = factory.openSession();
        Transaction tx = null;

        try{
            tx = session.beginTransaction();
            List employees = session.createQuery("FROM EMPLOYEE").list();
            for (Iterator iterator = employees.iterator(); iterator.hasNext();){
                Employee employee = (Employee) iterator.next();
                System.out.println("First Name : " + employee.getFirstName());
                System.out.println("Last Name : " + employee.getLastName());
                System.out.println("Salary : " + employee.getSalary());
            }
            tx.commit();
        } catch (HibernateException e){
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally{
            session.close();
            factory.close();
        }
    }

    // method update salary for an employee

    public void updateEmployee(Integer EmployeID, int salary){
        SessionFactory factory = meta.getSessionFactoryBuilder().build();
        Session session = factory.openSession();
        Transaction tx = null;

        try{
            tx = session.beginTransaction();
            Employee employee = (Employee) session.get(Employee.class, EmployeID);
            employee.setSalary(salary);
                session.update(employee);
            tx.commit();
        } catch (HibernateException e){
            if(tx != null) tx.rollback();
            e.printStackTrace();
        } finally{
            session.close();
            factory.close();
        }
    }

    // method to delete an employee from the records

    public void deleteEmployee(Integer EmployeeID){
        SessionFactory factory = meta.getSessionFactoryBuilder().build();
        Session session = factory.openSession();
        Transaction tx = null;

        try{
            tx = session.beginTransaction();
            Employee employee = (Employee) session.get(Employee.class, EmployeeID);
            session.delete(employee);
            tx.commit();
        } catch (HibernateException e){
            if(tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
            factory.close();
        }
    }
}
